[
   {
    "id":1,
    "questions": "Why  do we use useEffect in reactJs besides fetching api?",
    "answer":"The useEffect Hook allows us to perform side effects in our components.Some examples of side effects are: fetching data,directly updating the DOM,timers, validating input field, live filtering, trigger animation on new array value. It takes two arguments, first one is a call back function and second one is a dependency, which is optional. As the useEffect runs on every render, you have to inject dependency to controll that."

   },
   {
    "id":2,
    "questions": "What are the differences between props and state?",
    "answer":"Props are known as properties it can be used to pass data from one component to another. Props cannot be modified, read-only, and Immutable. On the other hand,  the state represents parts of an Application that can change. Each component can have its State. The state is Mutable and It is local to the component only."

   },
   {
    "id":3,
    "questions": "How does react work?",
    "answer":"ReactJS divides the UI into isolated reusable pieces of code known as components. React components work similarly to JavaScript functions as they accept arbitrary inputs called properties or props. It's possible to have as many components as necessary without cluttering your cod. React implements a virtual DOM that is basically a DOM tree representation in JavaScript. So when it needs to read or write to the DOM, it will use the virtual representation of it. Then the virtual DOM will try to find the most efficient way to update the browsers DOM.Unlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the React elements. The reason for this is that JavaScript is very fast and itâ€™s worth keeping a DOM tree in it to speed up its manipulation."

   }
 
]